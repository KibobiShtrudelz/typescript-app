import React, { useState } from "react";
import { Link } from "react-router-dom";
import {
  Modal,
  Form,
  Input,
  // Tooltip,
  // Cascader,
  // Select,
  // Row,
  // Col,
  Checkbox,
  Button,
  // AutoComplete,
} from "antd";
// import { QuestionCircleOutlined } from "@ant-design/icons";

// const { Option } = Select;
// const AutoCompleteOption = AutoComplete.Option;
// const residences = [
//   {
//     value: "bulgaria",
//     label: "–ë—ä–ª–≥–∞—Ä–∏—è",
//     children: [
//       {
//         value: "sofia",
//         label: "–°–æ—Ñ–∏—è",
//         children: [
//           {
//             value: "hristoSmirnenski",
//             label: "–∂–∫. –•—Ä–∏—Å—Ç–æ –°–º–∏—Ä–Ω–µ–Ω—Å–∫–∏",
//           },
//         ],
//       },
//     ],
//   },
// ];
const formItemLayout = {
  labelCol: {
    xs: {
      span: 24,
    },
    sm: {
      span: 8,
    },
  },
  wrapperCol: {
    xs: {
      span: 24,
    },
    sm: {
      span: 16,
    },
  },
};
const tailFormItemLayout = {
  wrapperCol: {
    xs: {
      span: 24,
      offset: 0,
    },
    sm: {
      span: 16,
      offset: 8,
    },
  },
};

const SignUp = () => {
  const [modalVisible, setModalVisible] = useState<boolean>(false);
  const [form] = Form.useForm();

  const onFinish = (values: any) => {
    console.log("Received values of form: ", values);
  };

  // const prefixSelector = (
  //   <Form.Item name="prefix" noStyle>
  //     <Select
  //       style={{
  //         width: 75,
  //       }}
  //     >
  //       <Option value="359">+359</Option>
  //     </Select>
  //   </Form.Item>
  // );

  return (
    <div>
      <Button type="primary" onClick={() => setModalVisible(true)}>
        Open Sign Up
      </Button>

      <Modal
        title={<span>üññ</span>}
        centered
        visible={modalVisible}
        footer={null}
      >
        <Form
          {...formItemLayout}
          form={form}
          name="register"
          onFinish={onFinish}
          initialValues={{
            residence: ["–ë—ä–ª–≥–∞—Ä–∏—è", "–°–æ—Ñ–∏—è", "–∂–∫. –•—Ä–∏—Å—Ç–æ –°–º–∏—Ä–Ω–µ–Ω—Å–∫–∏"],
            prefix: "359",
          }}
          scrollToFirstError
        >
          <Form.Item
            name="email"
            label="–ò–º–µ–π–ª"
            rules={[
              {
                type: "email",
                message: "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª!",
              },
              {
                required: true,
                message: "–ò–º–µ–π–ª–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω!",
              },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="password"
            label="–ü–∞—Ä–æ–ª–∞"
            rules={[
              {
                required: true,
                message: "–ü–∞—Ä–æ–ª–∞—Ç–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞!",
              },
            ]}
            hasFeedback
          >
            <Input.Password />
          </Form.Item>

          <Form.Item
            name="confirm"
            label="–ü–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞"
            dependencies={["password"]}
            hasFeedback
            rules={[
              {
                required: true,
                message: "–ú–æ–ª—è, –ø–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞ –≤–∏!",
              },
              ({ getFieldValue }) => ({
                validator(rule, value) {
                  if (!value || getFieldValue("password") === value) {
                    return Promise.resolve();
                  }

                  return Promise.reject("–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç!");
                },
              }),
            ]}
          >
            <Input.Password />
          </Form.Item>

          {/* <Form.Item
            name="nickname"
            label={
              <span>
                –ü—Å–µ–≤–¥–æ–Ω–∏–º&nbsp;
                <Tooltip title="–ö–∞–∫ –∂–µ–ª–∞–µ—Ç–µ –¥–∞ –≤–∏ –Ω–∞—Ä–∏—á–∞—Ç –¥—Ä—É–≥–∏—Ç–µ?">
                  <QuestionCircleOutlined />
                </Tooltip>
              </span>
            }
            rules={[
              {
                required: true,
                message: "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º!",
                whitespace: true,
              },
            ]}
          >
            <Input />
          </Form.Item> */}

          {/* <Form.Item
            name="residence"
            label="–ú–µ—Å—Ç–æ–∂–∏—Ç–µ–ª—Å—Ç–≤–æ"
            rules={[
              {
                type: "array",
                required: true,
                message: "–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ–∂–∏—Ç–µ–ª—Å—Ç–≤–æ!",
              },
            ]}
          >
            <Cascader options={residences} />
          </Form.Item> */}

          {/* <Form.Item
            name="phone"
            label="–ú–æ–±–∏–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω"
            rules={[
              {
                required: true,
                message: "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—è—Ç –º–æ–±–∏–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω!",
              },
            ]}
          >
            <Input
              addonBefore={prefixSelector}
              style={{
                width: "100%",
              }}
            />
          </Form.Item> */}

          <Form.Item
            name="agreement"
            valuePropName="checked"
            rules={[
              {
                validator: (_, value) =>
                  value
                    ? Promise.resolve()
                    : Promise.reject("–¢—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–∏–µ–º–µ—Ç–µ —Å–ø–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ—Ç–æ"),
              },
            ]}
            {...tailFormItemLayout}
          >
            <Checkbox>
              –ü—Ä–æ—á–µ—Ç–æ—Ö <Link to="#">—É—Å–ª–æ–≤–∏—è—Ç–∞</Link> –∑–∞ –ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Å–∞–π—Ç–∞
            </Checkbox>
          </Form.Item>

          <Form.Item {...tailFormItemLayout}>
            <Button type="primary" htmlType="submit">
              –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–π —Å–µ
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default SignUp;
